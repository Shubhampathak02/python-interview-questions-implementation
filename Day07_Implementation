-- Sample Tables
CREATE TABLE employees (
    emp_id INT,
    name VARCHAR(50),
    dept_id INT,
    salary INT
);

CREATE TABLE departments (
    dept_id INT,
    dept_name VARCHAR(50)
);

INSERT INTO employees VALUES
(1, 'Alice', 10, 50000),
(2, 'Bob', 20, 60000),
(3, 'Charlie', NULL, 55000),
(4, 'David', 30, 45000);

INSERT INTO departments VALUES
(10, 'HR'),
(20, 'Finance'),
(40, 'Marketing');

-- 1. Demonstrate all four JOIN types
-- INNER JOIN
SELECT e.name, d.dept_name
FROM employees e
INNER JOIN departments d ON e.dept_id = d.dept_id;

-- LEFT JOIN
SELECT e.name, d.dept_name
FROM employees e
LEFT JOIN departments d ON e.dept_id = d.dept_id;

-- RIGHT JOIN
SELECT e.name, d.dept_name
FROM employees e
RIGHT JOIN departments d ON e.dept_id = d.dept_id;

-- FULL OUTER JOIN (if not supported, simulate using UNION)
SELECT e.name, d.dept_name
FROM employees e
FULL OUTER JOIN departments d ON e.dept_id = d.dept_id;

-- 2. CTE to break down complex query
WITH high_salary AS (
    SELECT emp_id, name, salary
    FROM employees
    WHERE salary > 50000
)
SELECT * FROM high_salary WHERE name LIKE 'B%';

-- 3. Window Functions: RANK and PARTITION
SELECT name, dept_id, salary,
       RANK() OVER (PARTITION BY dept_id ORDER BY salary DESC) AS rank_in_dept
FROM employees;

-- 4. Create Index & Measure Speed
-- (In practice, use EXPLAIN ANALYZE or your DB tool to measure speed)
CREATE INDEX idx_employees_dept_id ON employees(dept_id);

-- Query that benefits from index
SELECT * FROM employees WHERE dept_id = 20;

-- 5. Pagination using LIMIT and OFFSET
-- Page 2, 2 results per page (e.g., records 3 & 4)
SELECT * FROM employees
ORDER BY name
LIMIT 2 OFFSET 2;
